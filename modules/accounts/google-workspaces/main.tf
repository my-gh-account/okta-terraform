#-------------------------------------------------------------------------------------------------------------------------------------
# VERSION REQUIREMENTS 
# Versions of Teraform and its providers pinned for stability
#-------------------------------------------------------------------------------------------------------------------------------------

terraform {
  required_version = "~> 1.1.0"
  required_providers {
    okta = {
      source  = "okta/okta"
      version = "~> 3.20"
    }
  }
}

#-------------------------------------------------------------------------------------------------------------------------------------
# DATA FOR OKTA_GROUPS/SLACK SPACES
# Pulls out the okta groups specified for google and filters the account names by workspsaces variable.  This is because the google
# provider has no api to redeploy the saml integration, so if all google groups are removed from okta, and we dynamically create
# the aplication based on existing groups, it will delete any app without an assigned group, and then to redeploy requires us to
# go back into the google api and recreate the saml integrtion.  We can dynamically create the assignemtns to it.
#-------------------------------------------------------------------------------------------------------------------------------------


data "okta_groups" "okta_groups" {}

locals {
  groups        = [for group in data.okta_groups.okta_groups.groups : group if(length(regexall("(?i)${var.app}", element(split("-", group.name), 1))) > 0)]
  account_names = { for group in local.groups : element(split("-", group.name), 2) => group.id if contains(var.accounts, element(split("-", group.name), 2)) }

}

#-------------------------------------------------------------------------------------------------------------------------------------
# SLACK OKTA APP
# Application generated by var.apps variable, to integrate with google
#-------------------------------------------------------------------------------------------------------------------------------------


resource "okta_app_saml" "saml-app" {
  for_each          = toset(var.accounts)
  app_links_json    = jsonencode(var.app_links_json)
  app_settings_json = jsonencode(var.app_settings_json != "" ? merge({ domain = each.value }, var.app_settings_json) : { domain = each.value })
  label             = each.value
  preconfigured_app = var.app
  lifecycle {
    ignore_changes = [users, groups, app_settings_json]
  }
}

#-------------------------------------------------------------------------------------------------------------------------------------
# GOOGLE OKTA APP ASSIGNMENTS 
# Application assignments generated dynamically based on valid workspace (var.apps variable).
#-------------------------------------------------------------------------------------------------------------------------------------

resource "okta_app_group_assignments" "app-assignments" {
  for_each   = { for key, value in okta_app_saml.saml-app : key => value if try(contains(keys(tomap(local.account_names)), key), false) }
  app_id     = each.value.id
  depends_on = [okta_app_saml.saml-app]

  group {
    priority = 1
    id       = join("", [for name, id in local.account_names : id if name == each.key])
  }
}
